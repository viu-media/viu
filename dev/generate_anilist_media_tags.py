#!/usr/bin/env -S uv run --script
import json
from collections import defaultdict
from pathlib import Path

import httpx
from viu_media.core.utils.graphql import execute_graphql

DEV_DIR = Path(__file__).resolve().parent
media_tags_type_py = (
    DEV_DIR.parent / "viu_media" / "libs" / "media_api" / "_media_tags.py"
)
media_tags_gql = DEV_DIR / "graphql" / "anilist" / "media_tags.gql"
generated_tags_json = DEV_DIR / "generated" / "anilist" / "tags.json"

media_tags_response = execute_graphql(
    "https://graphql.anilist.co", httpx.Client(), media_tags_gql, {}
)
media_tags_response.raise_for_status()

template = """\
# DO NOT EDIT THIS FILE !!! ( ｡ •̀ ᴖ •́ ｡)
# ITS AUTOMATICALLY GENERATED BY RUNNING ./dev/generate_anilist_media_tags.py
# FROM THE PROJECT ROOT
# SO RUN THAT INSTEAD TO UPDATE THE FILE WITH THE LATEST MEDIA TAGS :)


from enum import Enum


class MediaTag(Enum):\
"""

# 4 spaces
tab = "    "
tags = defaultdict(list)
for tag in media_tags_response.json()["data"]["MediaTagCollection"]:
    tags[tag["category"]].append(
        {
            "name": tag["name"],
            "description": tag["description"],
            "is_adult": tag["isAdult"],
        }
    )
# save copy of data used to generate the class
json.dump(tags, generated_tags_json.open("w", encoding="utf-8"), indent=2)

for key, value in tags.items():
    template = f"{template}\n{tab}#\n{tab}# {key.upper()}\n{tab}#\n"
    for tag in value:
        name = tag["name"]
        _tag_name = name.replace("-", "_").replace(" ", "_").upper()
        if _tag_name.startswith(("0", "1", "2", "3", "4", "5", "6", "7", "8", "9")):
            _tag_name = f"_{_tag_name}"

        tag_name = ""
        # sanitize invalid characters for attribute names
        for char in _tag_name:
            if char.isidentifier() or char.isdigit():
                tag_name += char

        desc = tag["description"].replace("\n", "")
        is_adult = tag["is_adult"]
        template = f'{template}\n{tab}# {desc} (is_adult: {is_adult})\n{tab}{tag_name} = "{name}"\n'

media_tags_type_py.write_text(template, "utf-8")
